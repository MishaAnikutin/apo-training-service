from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from dishka.integrations.aiogram import inject, FromDishka

from src.settings import BotConfig
from src.models.formData import Named, UserClass, FormData
from src.service.userService import UserService
from src.service.validationService import ValidationService
from src.service.statisticsService import StatisticsService
from src.service.filterService import FilterService


from .states import FormStates
from .keyboards import subjectsKeyboard, yesNoKeyboard
from .messages import ERROR_MESSAGE_WITH_TECHNICAL_SUPPORT, ERROR_MESSAGE


form_router = Router()


@form_router.message(Command("stop"))
async def message_stop(message: Message, state: FSMContext) -> Message:
    await state.clear()

    return await message.answer(text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã'
                                     '\n\n–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏ /start')


@form_router.message(FormStates.StartForm)
async def form(message: Message, state: FSMContext) -> None:
    await message.answer(
        text=f'üí´<b> –ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –ü–æ—Ö–æ–∂–µ, —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ‚ú® </b>\n\n'
             f'<i>–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–≤–µ—Ç–∏—à—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤?</i>\n\n'
             f'‚ù§Ô∏è<i><b> –í–µ–∂–ª–∏–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º!</b>\n\n'
             f'–§–æ—Ä–º–∞ –Ω–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è, –Ω–æ —Ç—ã –æ—á–µ–Ω—å –Ω–∞–º –ø–æ–º–æ–∂–µ—à—å, –µ—Å–ª–∏ –µ—ë –ø—Ä–æ–π–¥–µ—à—å! –ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ)</i>',
        parse_mode='html',
        reply_markup=ReplyKeyboardRemove()
    )

    await state.set_data(data=FormData())

    await message.answer(
        text='–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?\n\n'
             '<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
        parse_mode='html'
    )
    await state.set_state(FormStates.GetSurname)


@form_router.message(FormStates.GetSurname)
async def ask_surname(message: Message, state: FSMContext):
    form_data: FormData = await state.get_data()

    try:
        form_data.surname = Named(name=message.text)

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await state.set_data(data=form_data)

        await message.answer(
            text='–ö–∞–∫–æ–µ —Ç–≤–æ–µ –∏–º—è?'
                 '\n\n<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
            parse_mode='html'
        )

        await state.set_state(FormStates.GetName)


@form_router.message(FormStates.GetName)
async def ask_name(message: Message, state: FSMContext):
    form_data: FormData = await state.get_data()

    try:
        form_data.name = Named(name=message.text)

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await state.set_data(data=form_data)

        await message.answer(text='–ö–∞–∫–æ–µ —Ç–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ?\n'
                                  '–ï—Å–ª–∏ —É —Ç–µ–±—è –µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–Ω–µ—Ç"'
                                  '\n\n<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
                             parse_mode='html')

        await state.set_state(FormStates.GetLastName)


@form_router.message(FormStates.GetLastName)
async def ask_lastname(message: Message, state: FSMContext):
    form_data: FormData = await state.get_data()

    try:
        form_data.lastname = Named(name=message.text)

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await state.set_data(data=form_data)

        await message.answer(text='–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?\n'
                                  '–ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É, —Ç–æ –Ω–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ "–æ–∫–æ–Ω—á–∏–ª"'
                                  '\n\n<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
                             parse_mode='html')

        await state.set_state(FormStates.GetTrainingClass)


@form_router.message(FormStates.GetTrainingClass)
async def ask_training_class(message: Message, state: FSMContext):
    form_data: FormData = await state.get_data()

    try:
        form_data.training_class = UserClass(status=message.text)

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await state.set_data(data=form_data)

        await message.answer(text='–ö–∞–∫–æ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π —à–∫–æ–ª—ã?\n'
                                  '–ï—Å–ª–∏ —Ç—ã —É–∂–µ –æ–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É, —Ç–æ –Ω–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ "–æ–∫–æ–Ω—á–∏–ª"'
                                  '\n\n<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
                             parse_mode='html')

        await state.set_state(FormStates.GetSchool)


@form_router.message(FormStates.GetSchool)
async def ask_school(message: Message, state: FSMContext) -> None | Message:
    form_data: FormData = await state.get_data()

    form_data.school = message.text

    await state.set_data(data=form_data)

    await message.answer(text='–ö–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω —Ç–≤–æ–µ–π —à–∫–æ–ª—ã?\n'
                              '–ù–∞–ø–∏—à–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–µ—Ç –Ω–∞ 100%, '
                              '–Ω–∞—à–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–¥–±–µ—Ä—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n'
                              '<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
                         parse_mode='html')

    await state.set_state(FormStates.GetRegion)


@form_router.message(FormStates.GetRegion)
@inject
async def ask_region(message: Message, state: FSMContext, validation_service: FromDishka[ValidationService]):
    try:
        user_region = await validation_service.validate_region(message.text)

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await message.answer(f'–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–≥–∏–æ–Ω: "{user_region}"')

        form_data: FormData = await state.get_data()
        form_data.region = user_region
        await state.set_data(data=form_data)

        await message.answer(text='–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–æ—á—Ç—É\n\n'
                                  '<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
                             parse_mode='html')

        await state.set_state(FormStates.GetEmail)


@form_router.message(FormStates.GetEmail)
async def ask_email(message: Message, state: FSMContext):
    form_data: FormData = await state.get_data()

    try:
        form_data.email = message.text

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await state.set_data(data=form_data)

        await message.answer(text='–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç\n'
                                  '<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–µ –ø–µ—á–∞—Ç–∞–π –≤—Ä—É—á–Ω—É—é, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üëá</i>\n\n'
                                  '<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª</i>',
                             parse_mode='html',
                             reply_markup=await subjectsKeyboard())

        await state.set_state(FormStates.GetMainSubject)


@form_router.message(FormStates.GetMainSubject)
async def ask_personal_data(message: Message, state: FSMContext):
    form_data: FormData = await state.get_data()

    try:
        form_data.main_subject = message.text

    except ValueError as exc:
        await message.answer(text=ERROR_MESSAGE.format(exc), parse_mode='html')

    else:
        await state.set_data(data=form_data)

        await message.answer(text='–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n'
                                  '‚ùóÔ∏è –ï—Å–ª–∏ —Ç—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏—à—å—Å—è, —Ç–æ –Ω–µ —Å–º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º '
                                  '–∏ –≤—Å–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—Å—è\n\n'
                                  '<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–µ –ø–µ—á–∞—Ç–∞–π –≤—Ä—É—á–Ω—É—é, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üëá</i>',
                             reply_markup=await yesNoKeyboard(),
                             parse_mode='html')

        await state.set_state(FormStates.FinalState)


@form_router.message(FormStates.FinalState)
@inject
async def final_form(
        message: Message, state: FSMContext,
        user_service: FromDishka[UserService],
        filter_service: FromDishka[FilterService],
        statistics_service: FromDishka[StatisticsService]
) -> None:
    answer = message.text.lower().strip()

    form_data: FormData = await state.get_data()
    subject = form_data.main_subject
    uid = message.chat.id

    if answer in {'–¥–∞', '–¥–∞)', '–∞–≥–∞', '—É–≥—É'}:
        try:
            await user_service.add_user_with_form(form_data=form_data, username=message.chat.username, uid=uid)
            await filter_service.new(uid=uid, subject=subject)
            await statistics_service.new(uid=uid, subject=subject)

        except Exception as exc:
            await message.answer(text=ERROR_MESSAGE_WITH_TECHNICAL_SUPPORT.format(exc, BotConfig.technical_support))

        else:
            await message.answer(
                text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n'
                     '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ /start',
                reply_markup=ReplyKeyboardRemove()
            )

            await state.clear()

    elif answer in {'–Ω–µ—Ç', '–Ω–µ—Ç(', '–Ω–µ–∞'}:
        await message.answer(
            text='–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n\n'
                 '–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /start',
            reply_markup=ReplyKeyboardRemove())

        await state.clear()

    else:
        await message.answer(text='–ù–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É...\n\n–ü–æ–≤—Ç–æ—Ä–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
