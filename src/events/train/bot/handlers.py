from dishka import FromDishka
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import types, Bot, Router
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from aiogram.exceptions import TelegramBadRequest
from dishka.integrations.aiogram import inject

from src.service.questionService import QuestionService
from .states import TrainingStates
from src.models.trainData import TrainData
from src.service.UserService import UserService
from src.service.filterService import FilterService
from src.repository.files.photoRepository import PhotoRepository
from .keyboards import StartKeyboard, QuestionKeyboard, ResetKeyboard, ReportKeyboard


train_bot_router = Router()


@train_bot_router.message(Command("/train"))
@inject
async def start_train(
        message: types.Message,
        state: FSMContext,
        filter_service: FromDishka[FilterService],
) -> None:

    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, —Ç–æ —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –∏–Ω–∞—á–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    mode_text = ("üèÜ –í–∫–ª—é—á–µ–Ω —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"
                 if await filter_service.check_standard_filters(message.chat.id)
                 else "üìö –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –≤–∫–ª—é—á–µ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")

    await message.answer(text=f'<b>üî• –•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø–æ–µ—Ö–∞–ª–∏!</b>\n\n'
                              f'{mode_text}\n\n'
                              f'<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</i>',
                         parse_mode='html')

    await state.set_data(data=TrainData())

    await state.set_state(TrainingStates.AskQuestion)


@train_bot_router.message(TrainingStates.AskQuestion)
@inject
async def ask_question(
        message: types.Message,
        state: FSMContext,
        bot: Bot,
        question_service: FromDishka[QuestionService],
        user_service: FromDishka[UserService]
) -> Message:
    uid = message.chat.id

    question = await question_service.get_random_question(uid)
    question_data = db.random_question(uid)

    if question_data is None:
        # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª None, —Ç–æ —Ñ–∏–ª—å—Ç—Ä —Å–ª–∏—à–∫–æ–º –∂–µ—Å—Ç–∫–∏–π
        return await message.answer(
            text=f'–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º, —É–≤—ã, –Ω–µ—Ç :—Å\n\n'
                 f'<i>–¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å —Ç–µ—Å—Ç—ã!</i>',
            parse_mode='html',
            reply_markup=await StartKeyboard()
        )

    question_data[QUESTION_BODY] = question_data[QUESTION_BODY].replace('\n', ' ')
    response = await get_response_list(question_data=question_data)

    FileHandler.change_training_data(uid=uid, key='question', value=question_data)

    try:
        source = OlympsBeautifulDict[question_data[SOURCE]]
    except KeyError:
        source = question_data[SOURCE].replace('_', ' ')

    if question_data[IS_PICTURE] == 0:
        logging.info(f'question {question_data[QUESTION_TYPE]} {question_data[QUESTION_NUMBER]} have not a picture')

        await message.answer(
            text=f'üìç–í–æ–ø—Ä–æ—Å #{question_data[QUESTION_NUMBER]:05}\n'
                 f'  ¬∑ {source}\n'
                 f'  ¬∑ {ThemesBeautifulDict[subject].get(question_data[THEME], question_data[THEME])}\n\n'
                 f'{question_data[QUESTION_BODY]}\n\n'
                 f'–ù–∞–∂–º–∏ /stop, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å–∏–≤ –±–µ–∑ parse mode html
            reply_markup=await question_keyboard(question_type=question_data[QUESTION_TYPE], response_list=response)
        )

    else:
        logging.info(f'question {question_data[QUESTION_TYPE]} {question_data[QUESTION_NUMBER]} have a picture')
        loading_message = await message.answer(
            text='<i>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...</i>',
            parse_mode='html'
        )

        photo_path = f'src/files/images/{question_data["–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏"]} {question_data["—Ç–∏–ø"]}.png'
        photo = FSInputFile(photo_path)

        await bot.send_photo(
            chat_id=message.chat.id,
            caption=f'üìç–í–æ–ø—Ä–æ—Å #{question_data[QUESTION_NUMBER]:05}\n'
                    f'  ¬∑ {source}\n'
                    f'  ¬∑ {ThemesBeautifulDict[subject].get(question_data[THEME], question_data[THEME])}\n\n'
                    f'{question_data[QUESTION_BODY]}\n\n'
                    f'<i>–ù–∞–∂–º–∏ /stop, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</i>',
            parse_mode='html',
            photo=photo,
            reply_markup=await question_keyboard(question_type=question_data[QUESTION_TYPE], response_list=response)
        )

        # TODO: –ø–æ–¥—É–º–∞—Ç—å, –Ω–∞–¥–æ –ª–∏ –∏—Ö –ø–æ—Ç–æ–º —É–¥–∞–ª—è—Ç—å
        # os.remove(photo_path)
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)

    if question_data[QUESTION_TYPE] == 'MULT':
        msg = await message.answer(
            text='<i>–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n\n'
                 '\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –û—Ç–≤–µ—Ç–∏—Ç—å</i>',
            parse_mode='html',
            reply_markup=await reset_keyboard()
        )

        FileHandler.change_training_data(uid=uid, key='mult ans id', value=msg.message_id)

    await state.set_state(TrainingStates.waiting_for_answer)


async def stop_message(message: types.Message, state: FSMContext):

    uid = str(message.chat.id)
    data = FileHandler.get_training_data()

    await state.clear()

    await message.answer(
        text=f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
             f"üîπ –í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {data[uid]['correct answers']} –∏–∑ {data[uid]['total answers']}\n"
             f"üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–∏–ª–ª—Å—Ç—Ä–∏–∫: {data[uid]['max_killstreak']}\n\n",
        reply_markup=await start_keyboard()
    )

    FileHandler.del_user_from_training_data(uid=message.chat.id)


async def ans_questions(message: types.Message, state: FSMContext, bot: Bot):
    uid = str(message.from_user.id)
    question_data = FileHandler.get_training_data()[uid]['question']
    response_list = await get_response_list(question_data=question_data)

    logging.info(f'response_list: {response_list}')

    if question_data[QUESTION_TYPE] != 'OPEN'\
            and question_data[QUESTION_TYPE] != 'MULT':
        try:
            ans_index = str(response_list.index(message.text))

        except ValueError:
            logging.warning(f'{message.text} not found in {response_list}')
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ–∏–≥–Ω—é)
            # - —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
            return

    elif question_data[QUESTION_TYPE] == 'MULT':
        await state.set_state(TrainingStates.mult_ans)
        await mult_ans(message=message, bot=bot)

        try:
            ans_index = str(response_list.index(message.text))

        except ValueError:
            await message.answer(text='–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç...\n\n'
                                      '–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @MishaAnikutin')
            logging.warning(f'uid: {uid} problems with updating answer list with ans: {message.text}')
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ–∏–≥–Ω—é) -
            # —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
            return

        FileHandler.change_training_data(uid, key='ans list', value=ans_index)

    else:
        # –¢–ï–ü–ï–†–¨ –ú–ê–õ–ï–ù–¨–ö–ò–ï –ë–£–ö–í–´ –°–ß–ò–¢–ê–Æ–¢–°–Ø
        ans_index = message.text.lower().strip()

    logging.info(f'uid {uid} question id {question_data[QUESTION_NUMBER]} user answer: {ans_index}'
                 f'right answer: {question_data[QUESTION_ANSWER]}')
    if str(ans_index) == str(question_data[QUESTION_ANSWER]) and question_data[QUESTION_TYPE] != 'MULT':

        message = await message.answer(text='–í–µ—Ä–Ω–æ!', reply_markup=await report_keyboard())

        await update_data(uid=uid, is_right=True)
        await state.set_state(TrainingStates.ask_a_question)
        await ask_question(message, state, bot)

    elif ans_index != question_data[QUESTION_ANSWER] and question_data[QUESTION_TYPE] != 'MULT':
        right_answer = '\n' + response_list[question_data[QUESTION_ANSWER]]\
            if question_data[QUESTION_TYPE] != 'OPEN'\
            else question_data[QUESTION_ANSWER]

        message = await message.answer(
            text='–ù–µ–≤–µ—Ä–Ω–æ(\n\n'
                 f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <span class="tg-spoiler">{right_answer}</span>',
            parse_mode='html', reply_markup=await report_keyboard()
        )

        await update_data(uid=uid, is_right=False)

        await state.set_state(TrainingStates.ask_a_question)

        await ask_question(message, state, bot)


async def mult_ans(message: types.Message, bot: Bot) -> None:

    uid = str(message.from_user.id)

    data = FileHandler.get_training_data()
    question_data = FileHandler.get_training_data()[uid]['question']

    logging.info(f'mult ans question {question_data[QUESTION_NUMBER]}')

    response_list = await get_response_list(question_data=question_data)

    try:
        ans = data[uid]['ans list'] + str(response_list.index(message.text))

    except ValueError:
        ans = data[uid]['ans list']

    ans = ''.join(sorted({el for el in ans}))

    logging.info(f'uid: {uid}; question type: MULT; ans: {ans}')

    await edit_response_text(uid=uid, message_id=data[uid]['mult ans id'], new_response_index=ans, bot=bot)

    FileHandler.change_training_data(uid, key='ans list', value=ans)


async def end_mult_ans(message: types.Message, state: FSMContext, bot: Bot):
    uid = str(message.chat.id)

    data = FileHandler.get_training_data()
    question_data = data[uid]['question']

    ans = {el for el in data[uid]['ans list']}
    ans = ''.join(sorted(ans))

    if ans == question_data[QUESTION_ANSWER]:
        message = await message.answer(text='–í–µ—Ä–Ω–æ!', reply_markup=await report_keyboard())

        await update_data(uid=uid, is_right=True)

    else:
        response_list = await get_response_list(question_data=question_data)

        right_answer = '\n' + '\n'.join([response_list[int(i)] for i in str(question_data[QUESTION_ANSWER])])

        try:
            message = await message.answer(
                text='–Ω–µ–≤–µ—Ä–Ω–æ(\n\n'
                     f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <span class="tg-spoiler">{right_answer}</span>',
                parse_mode='html', reply_markup=await report_keyboard()
            )

        except Exception as exc:
            if exc == TelegramBadRequest:
                message = await message.answer(
                    text='–Ω–µ–≤–µ—Ä–Ω–æ(\n\n'
                         f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {right_answer}',
                    parse_mode='html', reply_markup=await report_keyboard()
                )

            else:
                message = await message.answer(
                    text='–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n'
                         f'–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É @MishaAnikutin',
                    parse_mode='html'
                )

        await update_data(uid=uid, is_right=False)

        if data[uid]['killstreak'] > data[uid]['max_killstreak']:
            FileHandler.change_training_data(uid=uid, key='max_killstreak', value=data[uid]['killstreak'] + 1)

    FileHandler.change_training_data(uid=uid, key='ans list', value='')

    await state.set_state(TrainingStates.waiting_for_answer)

    await ask_question(message, state, bot)


async def update_data(uid: int, is_right: bool):
    statistics = Statistic()

    is_filter_standard = await check_standard_filters(uid)

    data = FileHandler.get_training_data()
    question_data = FileHandler.get_training_data()[uid]['question']

    previous_question = (question_data[QUESTION_NUMBER], question_data[QUESTION_TYPE])
    FileHandler.change_training_data(uid=uid, key='previous question', value=previous_question)

    user_total_answers = int(statistics.get(uid=uid, key='–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤', subject=data[str(uid)]['question'][SUBJECT])[0][0])
    user_total_points = int(statistics.get(uid=uid, key='–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤', subject=data[str(uid)]['question'][SUBJECT])[0][0])

    statistics.change(uid=uid, key='–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤', subject=data[str(uid)]['question'][SUBJECT], value=user_total_answers + 1)
    FileHandler.change_training_data(uid=uid, key='total answers', value=data[uid]['total answers'] + 1)

    if is_right:
        user_correct_answers = int(statistics.get(uid=uid, key='–í—Å–µ–≥–æ –≤–µ—Ä–Ω—ã—Ö', subject=data[str(uid)]['question'][SUBJECT])[0][0])
        user_theme_total = int(statistics.get(uid=uid, key=question_data[THEME], subject=data[str(uid)]['question'][SUBJECT])[0][0])

        statistics.change(uid=uid, key='–í—Å–µ–≥–æ –≤–µ—Ä–Ω—ã—Ö', subject=data[str(uid)]['question'][SUBJECT], value=user_correct_answers + 1)
        statistics.change(uid=uid, key=question_data[THEME], subject=data[str(uid)]['question'][SUBJECT], value=user_theme_total + 1)

        if is_filter_standard:
            statistics.change(uid=uid, key='–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤', subject=data[str(uid)]['question'][SUBJECT],
                              value=user_total_points + matching_points[question_data[QUESTION_TYPE]])

        FileHandler.change_training_data(uid=uid, key='correct answers', value=data[uid]['correct answers'] + 1)
        FileHandler.change_training_data(uid=uid, key='killstreak', value=data[uid]['killstreak'] + 1)

        if data[uid]['killstreak'] > data[uid]['max_killstreak']:
            FileHandler.change_training_data(uid=uid, key='max_killstreak', value=data[uid]['killstreak'] + 1)

    else:
        FileHandler.change_training_data(uid=uid, key='killstreak', value=0)


async def edit_response_text(uid, message_id, new_response_index, bot):

    question_data = FileHandler.get_training_data()[uid]['question']
    response_list = await get_response_list(question_data=question_data)

    try:
        new_response_list = '\n'.join([response_list[int(i)].replace('\n', ' ') for i in new_response_index])

        await bot.edit_message_text(
            text='–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n\n{}\n'
                 '\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –û—Ç–≤–µ—Ç–∏—Ç—å'.format(new_response_list),
            chat_id=uid,
            reply_markup=await reset_keyboard(),
            message_id=message_id
        )

    except (IndexError, TypeError):
        pass


async def reset_answer_call(call: types.CallbackQuery, bot: Bot):
    uid = str(call.message.chat.id)
    message_id = str(call.message.message_id)

    await reset_answer(uid, message_id, bot)


async def reset_answer(uid: str, message_id: str, bot: Bot):
    FileHandler.change_training_data(uid, key='ans list', value='')

    await edit_response_text(uid, message_id, '', bot)


async def get_response_list(question_data: dict) -> list:
    response_list = list()

    if question_data[QUESTION_TYPE] == 'YN':
        response_list = ['1) –Ω–µ—Ç', '2) –¥–∞']

    elif question_data[QUESTION_TYPE] == 'MULT' \
            or question_data[QUESTION_TYPE] == 'ONE':
        for i in range(1, 5 + 1):
            if question_data[RESPONSE_OPTIONS.format(i)] is not None:
                response_list.append(question_data[RESPONSE_OPTIONS.format(i)].strip())

    return response_list
