from dishka import FromDishka
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import types, Bot, Router, F
from aiogram.fsm.context import FSMContext
from dishka.integrations.aiogram import inject

from src.models.trainData import TrainData
from src.models import QuestionType, QuestionData
from src.repository.files import PhotoRepository
from src.service.filterService import FilterService
from src.service.training.trainingService import TrainingService

from .callbacks import TrainCallbacks
from .states import TrainingStates
from .utils import get_response_list
from .messages import QUESTION_TEXT, MULTIPLE_QUESTION_USER_RESPONSES
from .keyboards import StartKeyboard, QuestionKeyboard, ResetKeyboard, ReportKeyboard

train_bot_router = Router()


@train_bot_router.message(Command("training"))
@inject
async def start_training(
        message: types.Message, state: FSMContext, bot: Bot,
        filter_service: FromDishka[FilterService],
        train_service: FromDishka[TrainingService],
        photo_repo: FromDishka[PhotoRepository]
) -> None:
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, —Ç–æ —ç—Ç–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –∏–Ω–∞—á–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    mode_text = ("üèÜ –í–∫–ª—é—á–µ–Ω —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"
                 if await filter_service.is_standard_filters(message.chat.id)
                 else "üìö –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É –≤–∫–ª—é—á–µ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")

    message = await message.answer(text=f'<b>üî• –•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø–æ–µ—Ö–∞–ª–∏!</b>\n\n'
                                        f'{mode_text}\n\n'
                                        f'<i>–ù–∞–ø–∏—à–∏ /stop, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</i>')

    await state.set_data(data=TrainData())
    await ask_question(message=message, state=state, bot=bot, train_service=train_service, photo_repo=photo_repo)


@train_bot_router.message(Command("stop"))
async def stop_message(message: types.Message, state: FSMContext):
    data: TrainData = await state.get_data()

    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–∏–ª–ª—Å—Ç—Ä–∏–∫
    await message.answer(
        text=f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
             f"üîπ –í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {data.right_answers} –∏–∑ {data.total_answers}",
        reply_markup=await StartKeyboard()
    )

    await state.clear()


async def ask_question(
        message: types.Message, state: FSMContext, bot: Bot,
        train_service: TrainingService,
        photo_repo: PhotoRepository
) -> Message:
    # –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    question: QuestionData = await train_service.get_random_question(message.chat.id)

    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª None, —Ç–æ —Ñ–∏–ª—å—Ç—Ä —Å–ª–∏—à–∫–æ–º –∂–µ—Å—Ç–∫–∏–π
    if question is None:
        return await message.answer(
            text=f'–ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º, —É–≤—ã, –Ω–µ—Ç :—Å\n\n'
                 f'<i>–¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å —Ç–µ—Å—Ç—ã!</i>',
            reply_markup=await StartKeyboard()
        )

    question_text = QUESTION_TEXT.format(question_id=question.question_id, source=question.source.value,
                                         theme=question.theme.value, text=question.text)

    markup = await QuestionKeyboard(question=question)

    if question.photo is None:
        await message.answer(text=question_text, reply_markup=markup)

    else:
        loading_message = await message.answer(text='<i>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...</i>',
                                               )

        photo = await photo_repo.read(question_id=question.question_id, question_type=question.question_type)

        await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
        await bot.send_photo(chat_id=message.chat.id, caption=question_text,
                             reply_markup=markup, photo=photo)

    if question.question_type == QuestionType.multiple:
        multiple_answer_message = await message.answer(
            text='<i>–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n\n'
                 '\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –û—Ç–≤–µ—Ç–∏—Ç—å</i>',
            reply_markup=await ResetKeyboard()
        )

        multiple_answer_message_id = multiple_answer_message.message_id

        return await state.set_state(TrainingStates.AwaitMultipleAnswer)

    else:
        multiple_answer_message_id = None

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    train_data: TrainData = await state.get_data()
    train_data.question = question

    # –ï—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä - –Ω–∞–¥–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–Ω–∞—á–µ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
    train_data.user_multiple_answer = multiple_answer_message_id

    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
    train_data.user_multiple_answer = set() if question.question_type == QuestionType.multiple else None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await state.set_data(data=train_data)

    # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await state.set_state(TrainingStates.AwaitAnswer)


@train_bot_router.message(TrainingStates.AwaitAnswer)
@inject
async def ans_questions(
        message: types.Message, state: FSMContext, bot: Bot,
        train_service: FromDishka[TrainingService],
        photo_repo: FromDishka[PhotoRepository]
):
    train_data: TrainData = await state.get_data()

    response_list = await get_response_list(question_data=train_data.question)

    if message.text not in response_list:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ–∏–≥–Ω—é)
        # - —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
        await message.answer(text='–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç...\n\n'
                                  '–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @MishaAnikutin')

        return

    # –û—Ç–≤–µ—Ç —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç, –∏–Ω–∞—á–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    answer: int | str = (response_list.index(message.text)
                         if train_data.question.question_type != QuestionType.open
                         else message.text)

    is_right = await train_service.check_answer(
        answer=answer,
        uid=message.chat.id,
        question_data=train_data.question
    )

    if is_right:
        # message =
        await message.answer(text='–í–µ—Ä–Ω–æ!', reply_markup=await ReportKeyboard())

    else:
        right_answer = (response_list[train_data.question.right_answer]
                        if train_data.question.question_type != QuestionType.open
                        else train_data.question.right_answer)

        # message =
        await message.answer(
            text='–ù–µ–≤–µ—Ä–Ω–æ(\n\n'
                 f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <span class="tg-spoiler">{right_answer}</span>',
            reply_markup=await ReportKeyboard()
        )

    await state.set_state(TrainingStates.AskQuestion)
    await ask_question(message, state, bot, train_service=train_service, photo_repo=photo_repo)


@train_bot_router.message(TrainingStates.AwaitMultipleAnswer)
@inject
async def mult_ans(message: Message, state: FSMContext, bot: Bot):
    train_data: TrainData = await state.get_data()

    question_data = train_data.question

    response_list = await get_response_list(question_data=question_data)

    if message.text not in response_list:
        return

    train_data.user_multiple_answer.add(response_list.index(message.text))

    new_response_data = ''.join(sorted([str(el) for el in train_data.user_multiple_answer]))

    new_response_text = await get_new_response_text(new_response_data=new_response_data)

    await bot.edit_message_text(
        text=MULTIPLE_QUESTION_USER_RESPONSES.format(user_response=new_response_text),
        chat_id=message.chat.id,
        reply_markup=await ReportKeyboard(),
        message_id=train_data.multiple_answer_message_id
    )


@train_bot_router.message(TrainingStates.AwaitMultipleAnswer, F.text == '–û—Ç–≤–µ—Ç–∏—Ç—å')
@inject
async def end_mult_ans(
        message: types.Message, state: FSMContext, bot: Bot,
        train_service: FromDishka[TrainingService],
        photo_repo: FromDishka[PhotoRepository]
):
    train_data: TrainData = await state.get_data()

    ans_text = ''.join(sorted(train_data.user_multiple_answer))

    is_right = await train_service.check_answer(uid=message.chat.id, question_data=train_data.question, answer=ans_text)

    if is_right:
        await message.answer(text='–í–µ—Ä–Ω–æ!', reply_markup=await ReportKeyboard())

    else:
        response_list = await get_response_list(question_data=train_data.question)

        right_answer = '\n' + '\n'.join([response_list[int(i)] for i in str(train_data.question.right_answer)])

        await message.answer(
            text='–Ω–µ–≤–µ—Ä–Ω–æ(\n\n'
                 f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: <span class="tg-spoiler">{right_answer}</span>',
            reply_markup=await ReportKeyboard()
        )

    await ask_question(message, state, bot, photo_repo=photo_repo, train_service=train_service)


async def get_new_response_text(new_response_data: list[str]):
    return '\n'.join([response.replace('\n', ' ') for response in new_response_data])


@train_bot_router.callback_query(F.data == TrainCallbacks.reset_answer.value)
async def reset_answer(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    train_data: TrainData = await state.get_data()

    train_data.user_multiple_answer = set()

    await state.set_data(data=train_data)

    new_response_text = await get_new_response_text(new_response_data=list())

    await bot.edit_message_text(
        text=MULTIPLE_QUESTION_USER_RESPONSES.format(user_response=new_response_text),
        chat_id=call.message.chat.id,
        reply_markup=await ReportKeyboard(),
        message_id=train_data.multiple_answer_message_id
    )
